name: Create Release

on:
  workflow_call:
    secrets:
      PAT:
        required: true

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  release:
    name: Create Release and Publish Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/

      - name: Set up Git authentication
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git

      - name: Fetch all tags
        run: |
          git fetch --tags --force origin
          git fetch --prune --unshallow

      - name: Determine last tag
        run: |
          last_tag=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$last_tag" ]; then
            echo "No previous tag found."
            echo "LAST_TAG=" >> $GITHUB_ENV
          else
            echo "LAST_TAG=$last_tag" >> $GITHUB_ENV
          fi

      - name: Get last closed milestone (with fallback)
        id: milestone
        run: |
          milestone_data=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones?state=closed" | \
            jq '. | sort_by(.closed_at) | last | {title, closed_at}')

          # Estrai il titolo della milestone
          milestone_title=$(echo "$milestone_data" | jq -r '.title')
          if [ -z "$milestone_title" ] || [ "$milestone_title" == "null" ]; then
            echo "❌ No closed milestone found. Cancelling release."
            exit 1
          else
            echo "✅ Milestone found: $milestone_title"
            echo "MILESTONE_TITLE=$milestone_title" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Generate version number
        run: |
          VERSION="v${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ vars.HOTFIX_VERSION }} ${{ github.run_number }}"
          # Sostituire gli spazi con trattini
          VERSION="${VERSION// /-}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Debug - List Issues and PRs without Milestone
        run: |
          echo "🔍 Checking closed issues without milestone..."
          gh issue list --state closed --json title,number,milestone --jq \
            '.[] | select(.milestone == null) | "- \(.title) (#\(.number))"'

          echo "🔍 Checking merged PRs without milestone..."
          gh pr list --state merged --base main --json title,number,milestone --jq \
            '.[] | select(.milestone == null) | "- \(.title) (#\(.number))"'
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Generate Changelog with Categorized Issues and PRs
        run: |
          echo "# 🚀 Release: ${{ env.MILESTONE_TITLE }} ${{ env.VERSION }}" > release_body.md
          echo "" >> release_body.md
          echo "## 📜 Changelog" >> release_body.md
          echo "" >> release_body.md

          LABELS=("bug" "documentation" "duplicate" "feature" "pbi" "help wanted" "invalid" "question" "wontfix")
          CATEGORIES=("🐛 Bug Fixes" "📄 Documentation" "🛑 Duplicates" "✨ Feature" "🚀 Product Backlog Item" "🤝 Help Wanted" "⚠️ Invalid" "❓ Questions" "🚫 Won't Fix")

          echo "### 📌 Issues Closed" >> release_body.md
          echo "" >> release_body.md

          for i in "${!CATEGORIES[@]}"; do
            category="${CATEGORIES[$i]}"
            label="${LABELS[$i]}"

            issues=$(gh issue list --state closed --milestone "${{ env.MILESTONE_TITLE }}" --json title,number,labels --jq '
                .[] | select(.labels | any(.name == "'"$label"'")) | 
                "- \"" + .title + "\" (#" + (.number | tostring) + ") [" + (.labels | map(.name) | join(", ")) + "]"')

            if [ ! -z "$issues" ]; then
              echo "#### $category" >> release_body.md
              echo "$issues" >> release_body.md
              echo "" >> release_body.md
              echo "" >> release_body.md
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Create and push Git tag
        run: |
          VERSION="${{ env.VERSION }}"
          VERSION=$(echo "$VERSION" | sed 's/(/\(/g; s/)/\)/g')

          echo "$VERSION"
          
          git fetch --tags --force
          git checkout main
          git pull origin main --rebase
          
          if git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; then
            echo "🚫 Tag $VERSION already exists. Skipping creation."
          else
            git tag "$VERSION"
            git push origin "$VERSION"
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          bodyFile: "release_body.md"
          draft: false
          prerelease: false
          token: ${{ secrets.PAT }}

      - name: Rename the JAR file with version
        run: |
          # Trova il primo file .jar nella cartella build/libs
          JAR_FILE=$(find build/libs/ -type f -name "*.jar" | head -n 1)

          # Se non viene trovato alcun file JAR, esci con un errore
          if [ -z "$JAR_FILE" ]; then
            echo "❌ No JAR file found. Exiting..."
            exit 1
          fi

          # Ottieni la versione dal contesto delle variabili di ambiente
          VERSION="v${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ vars.HOTFIX_VERSION }}_${{ env.MILESTONE_TITLE }}"

          # Crea il nuovo nome del JAR usando il nome del repository e la versione
          NEW_JAR_NAME="$(basename ${{ github.repository }})-${VERSION}.jar"
    
          # Rinomina il file JAR
          mv "$JAR_FILE" "build/libs/$NEW_JAR_NAME"
          echo "Renamed JAR: build/libs/$NEW_JAR_NAME"

          # Salva i nuovi nomi come variabili d'ambiente
          echo "NEW_CLI_JAR_NAME=$NEW_CLI_JAR_NAME" >> $GITHUB_ENV
          echo "NEW_GUI_JAR_NAME=$NEW_GUI_JAR_NAME" >> $GITHUB_ENV

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          files: |
            build/libs/${{ env.NEW_CLI_JAR_NAME }}
            build/libs/${{ env.NEW_GUI_JAR_NAME }}
          token: ${{ secrets.PAT }}
